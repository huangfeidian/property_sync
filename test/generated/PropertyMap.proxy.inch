
#ifndef __meta_parse__



template <>
class prop_record_proxy<spiritsaway::test::PropertyMap>
{
	spiritsaway::test::PropertyMap& m_PropertyMap_data;
	msg_queue_base& m_queue;
public:
	const property_record_offset m_offset;
	const property_flags m_flag;
public:
	prop_record_proxy(spiritsaway::test::PropertyMap& data, msg_queue_base& msg_queue,
		const property_record_offset& offset, const property_flags& flag)
		: m_PropertyMap_data(data)
		, m_offset(offset)
		, m_queue(msg_queue)
		, m_flag(flag)
	{

	}
	const spiritsaway::test::PropertyMap&  get_PropertyMap() const
	{
		return m_PropertyMap_data;
	}

const spiritsaway::test::PropertyMap& data() const
{
	return m_PropertyMap_data;
}


	prop_record_proxy<decltype(m_PropertyMap_data.m_a)> a()
	{
		return prop_record_proxy<decltype(m_PropertyMap_data.m_a)>(m_PropertyMap_data.m_a, m_queue, m_offset.merge(spiritsaway::test::PropertyMap::index_for_a), m_flag.merge(property_flags{ spiritsaway::test::PropertyMap::flag_for_a}));
	}
	prop_record_proxy<decltype(m_PropertyMap_data.m_b)> b()
	{
		return prop_record_proxy<decltype(m_PropertyMap_data.m_b)>(m_PropertyMap_data.m_b, m_queue, m_offset.merge(spiritsaway::test::PropertyMap::index_for_b), m_flag.merge(property_flags{ spiritsaway::test::PropertyMap::flag_for_b}));
	}
	prop_record_proxy<decltype(m_PropertyMap_data.m_c)> c()
	{
		return prop_record_proxy<decltype(m_PropertyMap_data.m_c)>(m_PropertyMap_data.m_c, m_queue, m_offset.merge(spiritsaway::test::PropertyMap::index_for_c), m_flag.merge(property_flags{ spiritsaway::test::PropertyMap::flag_for_c}));
	}
	prop_record_proxy<decltype(m_PropertyMap_data.m_d)> d()
	{
		return prop_record_proxy<decltype(m_PropertyMap_data.m_d)>(m_PropertyMap_data.m_d, m_queue, m_offset.merge(spiritsaway::test::PropertyMap::index_for_d), m_flag.merge(property_flags{ spiritsaway::test::PropertyMap::flag_for_d}));
	}
	prop_record_proxy<decltype(m_PropertyMap_data.m_e)> e()
	{
		return prop_record_proxy<decltype(m_PropertyMap_data.m_e)>(m_PropertyMap_data.m_e, m_queue, m_offset.merge(spiritsaway::test::PropertyMap::index_for_e), m_flag.merge(property_flags{ spiritsaway::test::PropertyMap::flag_for_e}));
	}
	prop_record_proxy<decltype(m_PropertyMap_data.m_f)> f()
	{
		return prop_record_proxy<decltype(m_PropertyMap_data.m_f)>(m_PropertyMap_data.m_f, m_queue, m_offset.merge(spiritsaway::test::PropertyMap::index_for_f), m_flag.merge(property_flags{ spiritsaway::test::PropertyMap::flag_for_f}));
	}
	prop_record_proxy<decltype(m_PropertyMap_data.m_g)> g()
	{
		return prop_record_proxy<decltype(m_PropertyMap_data.m_g)>(m_PropertyMap_data.m_g, m_queue, m_offset.merge(spiritsaway::test::PropertyMap::index_for_g), m_flag.merge(property_flags{ spiritsaway::test::PropertyMap::flag_for_g}));
	}
	prop_record_proxy<decltype(m_PropertyMap_data.m_h)> h()
	{
		return prop_record_proxy<decltype(m_PropertyMap_data.m_h)>(m_PropertyMap_data.m_h, m_queue, m_offset.merge(spiritsaway::test::PropertyMap::index_for_h), m_flag.merge(property_flags{ spiritsaway::test::PropertyMap::flag_for_h}));
	}
};
#endif