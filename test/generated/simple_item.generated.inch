
#ifndef __meta_parse__
public:
friend class spiritsaway::property::prop_record_proxy<simple_item>;
friend class spiritsaway::property::prop_replay_proxy<simple_item>;
simple_item();
const decltype(m_a)& a() const
{
    return m_a;
}


public:

bool replay_mutate_msg(spiritsaway::property::property_offset offset, spiritsaway::property::var_mutate_cmd cmd, const json& data);

bool operator==(const simple_item& other) const;
bool operator!=(const simple_item& other) const;

json encode_with_flag(const spiritsaway::property::property_flags flag) const;

friend void swap(simple_item& a, simple_item& b)
{
	swap((spiritsaway::property::property_item<int>&)a, (spiritsaway::property::property_item<int>&)b);

	std::swap(a.m_a, b.m_a);
}

json encode() const;

bool decode(const json& data);

bool has_default_value() const;

protected:
const static std::uint8_t index_for_a = 0;
const static std::uint64_t flag_for_a = spiritsaway::property::property_flags::sync_clients;

private:

#endif


