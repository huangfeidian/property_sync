
#ifndef __meta_parse__
public:
friend class spiritsaway::property::prop_record_proxy<PropertyMap>;
friend class spiritsaway::property::prop_replay_proxy<PropertyMap>;

PropertyMap();


const decltype(m_a)& a() const
{
	return m_a;
}

const decltype(m_b)& b() const
{
	return m_b;
}

const decltype(m_c)& c() const
{
	return m_c;
}

const decltype(m_d)& d() const
{
	return m_d;
}

const decltype(m_e)& e() const
{
	return m_e;
}

const decltype(m_f)& f() const
{
	return m_f;
}

const decltype(m_g)& g() const
{
	return m_g;
}

const decltype(m_h)& h() const
{
	return m_h;
}

const decltype(m_i)& i() const
{
	return m_i;
}

const decltype(m_j)& j() const
{
	return m_j;
}


public:

bool replay_mutate_msg(spiritsaway::property::property_replay_offset offset, spiritsaway::property::property_cmd cmd, const json& data);

bool operator==(const PropertyMap& other) const;
bool operator!=(const PropertyMap& other) const;

json encode_with_flag(const spiritsaway::property::property_flags flag, bool ignore_default, bool replace_key_by_index) const;
void encode_with_flag(const spiritsaway::property::property_flags flag, bool ignore_default, json::array_t& result) const;
void encode_with_flag(const spiritsaway::property::property_flags flag, bool ignore_default, json::object_t& result) const;

friend void swap(PropertyMap& a, PropertyMap& b)
{
	using std::swap;


	swap(a.m_a, b.m_a);
	swap(a.m_b, b.m_b);
	swap(a.m_c, b.m_c);
	swap(a.m_d, b.m_d);
	swap(a.m_e, b.m_e);
	swap(a.m_f, b.m_f);
	swap(a.m_g, b.m_g);
	swap(a.m_h, b.m_h);
	swap(a.m_i, b.m_i);
	swap(a.m_j, b.m_j);
}



void clear()
{
	using std::swap;
	PropertyMap temp_empty_instance;
	swap(*this, temp_empty_instance);
}

json encode() const;

bool decode(const json& data);
bool decode(const json::object_t& data);
bool decode(const std::vector<std::pair<std::uint8_t, json>>& data, std::uint32_t& next_idx);

bool has_default_value() const;

public:
constexpr static std::uint8_t index_for_a = 0;
constexpr static std::uint64_t flag_for_a = 0;

constexpr static std::uint8_t index_for_b = 1;
constexpr static std::uint64_t flag_for_b = 0;

constexpr static std::uint8_t index_for_c = 2;
constexpr static std::uint64_t flag_for_c = 0;

constexpr static std::uint8_t index_for_d = 3;
constexpr static std::uint64_t flag_for_d = spiritsaway::property::test_property_flags::save_db;

constexpr static std::uint8_t index_for_e = 4;
constexpr static std::uint64_t flag_for_e = spiritsaway::property::test_property_flags::sync_clients;

constexpr static std::uint8_t index_for_f = 5;
constexpr static std::uint64_t flag_for_f = 0;

constexpr static std::uint8_t index_for_g = 6;
constexpr static std::uint64_t flag_for_g = spiritsaway::property::test_property_flags::sync_clients|spiritsaway::property::test_property_flags::save_db;

constexpr static std::uint8_t index_for_h = 7;
constexpr static std::uint64_t flag_for_h = spiritsaway::property::test_property_flags::sync_clients|spiritsaway::property::test_property_flags::save_db;

constexpr static std::uint8_t index_for_i = 8;
constexpr static std::uint64_t flag_for_i = spiritsaway::property::test_property_flags::sync_clients|spiritsaway::property::test_property_flags::save_db;

constexpr static std::uint8_t index_for_j = 9;
constexpr static std::uint64_t flag_for_j = spiritsaway::property::test_property_flags::sync_clients|spiritsaway::property::test_property_flags::save_db;


constexpr static std::uint8_t index_begin_for_PropertyMap = 0;
constexpr static std::uint8_t index_end_for_PropertyMap = 10;
private:

#endif


