
#ifndef __meta_parse__
public:
friend class spiritsaway::property::prop_record_proxy<PropertyMap>;
friend class spiritsaway::property::prop_replay_proxy<PropertyMap>;
PropertyMap();
const decltype(m_a)& a() const
{
    return m_a;
}
const decltype(m_b)& b() const
{
    return m_b;
}
const decltype(m_c)& c() const
{
    return m_c;
}
const decltype(m_d)& d() const
{
    return m_d;
}
const decltype(m_e)& e() const
{
    return m_e;
}
const decltype(m_f)& f() const
{
    return m_f;
}
const decltype(m_g)& g() const
{
    return m_g;
}


public:

bool replay_mutate_msg(spiritsaway::property::property_offset offset, spiritsaway::property::property_cmd cmd, const json& data);

bool operator==(const PropertyMap& other) const;
bool operator!=(const PropertyMap& other) const;

json encode_with_flag(const spiritsaway::property::property_flags flag, bool ignore_default, bool replace_key_by_index) const;
void encode_with_flag(const spiritsaway::property::property_flags flag, bool ignore_default, json::array_t& result) const;
void encode_with_flag(const spiritsaway::property::property_flags flag, bool ignore_default, json::object_t& result) const;

friend void swap(PropertyMap& a, PropertyMap& b)
{


	std::swap(a.m_a, b.m_a);
	std::swap(a.m_b, b.m_b);
	std::swap(a.m_c, b.m_c);
	std::swap(a.m_d, b.m_d);
	std::swap(a.m_e, b.m_e);
	std::swap(a.m_f, b.m_f);
	std::swap(a.m_g, b.m_g);
}

json encode() const;

bool decode(const json& data);
bool decode(const json::object_t& data);
bool decode(const std::vector<std::pair<std::uint8_t, json>>& data);

bool has_default_value() const;

protected:
const static std::uint8_t index_for_a = 0;
const static std::uint64_t flag_for_a = 0;

const static std::uint8_t index_for_b = 1;
const static std::uint64_t flag_for_b = 0;

const static std::uint8_t index_for_c = 2;
const static std::uint64_t flag_for_c = 0;

const static std::uint8_t index_for_d = 3;
const static std::uint64_t flag_for_d = spiritsaway::property::property_flags::save_db;

const static std::uint8_t index_for_e = 4;
const static std::uint64_t flag_for_e = spiritsaway::property::property_flags::sync_clients;

const static std::uint8_t index_for_f = 5;
const static std::uint64_t flag_for_f = 0;

const static std::uint8_t index_for_g = 6;
const static std::uint64_t flag_for_g = spiritsaway::property::property_flags::save_db|spiritsaway::property::property_flags::sync_clients;


const static std::uint8_t index_begin_for_PropertyMap = 0;
const static std::uint8_t index_end_for_PropertyMap = 7;
private:

#endif


