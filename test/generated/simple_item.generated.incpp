
simple_item::simple_item()
	: spiritsaway::property::property_item<int>()
	, m_a{}
	, m_b{}
{

}

bool simple_item::replay_mutate_msg(spiritsaway::property::property_offset offset, spiritsaway::property::property_cmd cmd, const json& data)
{
	auto split_result = offset.split();
	auto field_index = split_result.second;
	auto remain_offset = split_result.first;
	switch(field_index)
	{
		case index_for_a:
		{
			auto temp_proxy = make_replay_proxy(m_a);
			return temp_proxy.replay(remain_offset, cmd, data);
		}
		case index_for_b:
		{
			auto temp_proxy = make_replay_proxy(m_b);
			return temp_proxy.replay(remain_offset, cmd, data);
		}
		default:
			return spiritsaway::property::property_item<int>::replay_mutate_msg(offset, cmd, data);
		
	}
}

bool simple_item::filter_with_flag(spiritsaway::property::property_flags flag, spiritsaway::property::property_offset offset, spiritsaway::property::property_cmd cmd, const json& data, json& result_data) const
{
	auto split_result = offset.split();
	auto field_index = split_result.second;
	auto remain_offset = split_result.first;
	switch(field_index)
	{
		case index_for_a:
		{
			if((flag_for_a & flag.value) == flag.value)
			{
				
				result_data = data;
				return true;
			}
			else
			{
				return false;
			}
			
		}
		case index_for_b:
		{
			if((flag_for_b & flag.value) == flag.value)
			{
				
				result_data = data;
				return true;
			}
			else
			{
				return false;
			}
			
		}
		default:
			return spiritsaway::property::property_item<int>::filter_with_flag(flag, remain_offset, cmd, data, result_data);
		
	}
}

bool simple_item::operator==(const simple_item& other) const
{
	if(!spiritsaway::property::property_item<int>::operator==(other))
	{
		return false;
	}
	if(m_a != other.m_a)
	{
		return false;
	}
	if(m_b != other.m_b)
	{
		return false;
	}
	return true;
}
bool simple_item::operator!=(const simple_item& other) const
{
	return !(operator==(other));
}


json simple_item::encode() const
{
	json result = spiritsaway::property::property_item<int>::encode();
	
	
	if(!spiritsaway::property::has_default_value<decltype(m_a)>()(m_a))
	{
		result["a"] = spiritsaway::serialize::encode(m_a);
	}
	
	if(!spiritsaway::property::has_default_value<decltype(m_b)>()(m_b))
	{
		result["b"] = spiritsaway::serialize::encode(m_b);
	}
	return result;
}

json simple_item::encode_with_flag(const spiritsaway::property::property_flags flag) const
{
	json result = spiritsaway::property::property_item<int>::encode_with_flag(flag);
	
	if((flag_for_a & flag.value) == flag.value)
	{
		
		if(!spiritsaway::property::has_default_value<decltype(m_a)>()(m_a))
		{
			result["a"] = spiritsaway::serialize::encode(m_a);
		}
	}
	if((flag_for_b & flag.value) == flag.value)
	{
		
		if(!spiritsaway::property::has_default_value<decltype(m_b)>()(m_b))
		{
			result["b"] = spiritsaway::serialize::encode(m_b);
		}
	}
	return result;
}
bool simple_item::decode(const json& data)
{
	if(!spiritsaway::property::property_item<int>::decode(data))
	{
		return false;
	}
	decltype(data.end()) iter;
	iter = data.find("a");
	if(iter != data.end())
	{
		if(!spiritsaway::serialize::decode(*iter, m_a))
		{
			return false;
		}
	}
	
	iter = data.find("b");
	if(iter != data.end())
	{
		if(!spiritsaway::serialize::decode(*iter, m_b))
		{
			return false;
		}
	}
	
	return true;
}

bool simple_item::has_default_value() const
{
	if(!spiritsaway::property::property_item<int>::has_default_value())
	{
		return false;
	}
	
	if(!spiritsaway::property::has_default_value<decltype(m_a)>()(m_a))
	{
		return false;
	}
	
	if(!spiritsaway::property::has_default_value<decltype(m_b)>()(m_b))
	{
		return false;
	}
	return true;
}


