
#ifndef __meta_parse__

{{#has_base_class}}
template <> 
	{{#is_property_item_direct_subclass}}
class prop_record_proxy<{{{class_full_name}}}>{{/is_property_item_direct_subclass}}
	{{^is_property_item_direct_subclass}}
class prop_record_proxy<{{{class_full_name}}}>: public prop_record_proxy<{{{base_class_name}}}>{{/is_property_item_direct_subclass}}
{
	{{{class_full_name}}}& m_{{{class_name}}}_data;
	{{#is_property_item_direct_subclass}}
	item_msg_queue m_queue;
	const property_flags m_flag;
	{{/is_property_item_direct_subclass}}
public:

public:
    {{#is_property_item}}
	{{#is_property_item_direct_subclass}}
	prop_record_proxy({{{class_full_name}}}& data, msg_queue_base& msg_queue,
		const property_record_offset& offset, const property_flags& flag, std::uint32_t data_idx)
		: m_queue(msg_queue, offset, data_idx)
		, m_{{{class_name}}}_data(data)
		, m_flag(flag)
	{

	}
	{{/is_property_item_direct_subclass}}
	{{^is_property_item_direct_subclass}}
	
	prop_record_proxy({{{class_full_name}}}& data, msg_queue_base& msg_queue,
		const property_record_offset& offset, std::uint32_t data_idx)
		:  public prop_record_proxy<{{{base_class_name}}}>(data, msg_queue, offset, flag, data_idx)
		, m_{{{class_name}}}_data(data)
	{

	}
	{{/is_property_item_direct_subclass}}

	{{/is_property_item}}
	{{^is_property_item}}
	prop_record_proxy({{{class_full_name}}}& data, msg_queue_base& msg_queue,
		const property_record_offset& offset)
		: prop_record_proxy<{{{base_class_name}}}>(data, msg_queue, offset)
		, m_{{{class_name}}}_data(data)
	{

	}
	{{/is_property_item}}

{{/has_base_class}}

{{^has_base_class}}
template <>
class prop_record_proxy<{{{class_full_name}}}>
{
	{{{class_full_name}}}& m_{{{class_name}}}_data;
	msg_queue_base& m_queue;
public:
	const property_record_offset m_offset;
	const property_flags m_flag;
public:
	prop_record_proxy({{{class_full_name}}}& data, msg_queue_base& msg_queue,
		const property_record_offset& offset, const property_flags& flag)
		: m_{{{class_name}}}_data(data)
		, m_offset(offset)
		, m_queue(msg_queue)
		, m_flag(flag)
	{

	}
	const {{{class_full_name}}}&  get_{{{class_name}}}() const
	{
		return m_{{{class_name}}}_data;
	}
{{/has_base_class}}

	const {{{class_full_name}}}& data() const
	{
		return m_{{class_name}}_data;
	}

{{#is_property_item}}
{{#property_fields}}
{{^annotate_property_no_proxy}}
	prop_record_proxy<decltype(m_{{{class_name}}}_data.m_{{field_name}})> {{field_name}}()
	{
		property_record_offset empty_offset;
		return prop_record_proxy<decltype(m_{{{class_name}}}_data.m_{{field_name}})>(m_{{{class_name}}}_data.m_{{field_name}}, m_queue, empty_offset.merge({{{class_full_name}}}::index_for_{{field_name}}), m_flag.merge(property_flags{ {{{class_full_name}}}::flag_for_{{field_name}}}));
	}
{{/annotate_property_no_proxy}}
{{/property_fields}}

{{/is_property_item}}
{{^is_property_item}}
{{#property_fields}}
	prop_record_proxy<decltype(m_{{{class_name}}}_data.m_{{field_name}})> {{field_name}}()
	{
		return prop_record_proxy<decltype(m_{{{class_name}}}_data.m_{{field_name}})>(m_{{{class_name}}}_data.m_{{field_name}}, m_queue, m_offset.merge({{{class_full_name}}}::index_for_{{field_name}}), m_flag.merge(property_flags{ {{{class_full_name}}}::flag_for_{{field_name}}}));
	}
{{/property_fields}}

	void clear()
	{
		m_{{class_name}}_data.clear();
		if (m_queue.is_flag_need(m_flag))
		{
			m_queue.add(m_offset.merge({{{class_full_name}}}::index_end_for_{{class_name}}), property_cmd::clear, m_flag, json());
		}
	}
	void set(const json& other_json)
	{
		{{{class_full_name}}} new_{{class_name}}_data;
		if(!serialize::decode(other_json, new_{{class_name}}_data))
		{
			return;
		}
		using std::swap;
		swap(m_{{class_name}}_data, new_{{class_name}}_data);
		for (auto one_need_flag : m_queue.m_need_flags)
		{
			if (one_need_flag.include_by(m_flag))
			{
				auto one_encode_result = m_{{class_name}}_data.encode_with_flag(one_need_flag, m_queue.m_encode_ignore_default, m_queue.m_encode_with_array);

				m_queue.add_for_flag(m_offset.merge({{{class_full_name}}}::index_end_for_{{class_name}}), property_cmd::set, one_need_flag, m_flag, one_encode_result);
			}
		}
	}
{{/is_property_item}}
};
#endif