namespace {{class_namespace}}
{
{{^has_base_class}}
{{{class_name}}}::{{{class_name}}}()
{{#property_fields}}{{#first_field}}	: m_{{field_name}}{}{{/first_field}}
{{^first_field}}
	, m_{{field_name}}{}{{/first_field}}{{/property_fields}}
{

}
{{/has_base_class}}

bool {{{class_name}}}::replay_mutate_msg(spiritsaway::property::property_replay_offset offset, spiritsaway::property::property_cmd cmd, const json& data)
{
	using std::swap;
	auto split_result = offset.split();
	auto field_index = split_result.second;
	auto remain_offset = split_result.first;
	switch(field_index)
	{
{{#property_fields}}		
		case index_for_{{field_name}}:
		{
			auto temp_proxy = spiritsaway::property::make_replay_proxy(m_{{field_name}});
			return temp_proxy.replay(remain_offset, cmd, data);
		}
{{/property_fields}}
		{{^is_property_item}}
		case index_end_for_{{class_name}}:
		{
			if(cmd == spiritsaway::property::property_cmd::clear)
			{
				{{class_name}} temp_clear_instance{};
				swap(*this, temp_clear_instance);
				return true;
			}
			else if(cmd == spiritsaway::property::property_cmd::set)
			{
				
				{{class_name}} new_value;
				if(!serialize::decode(data, new_value))
				{
					return false;
				}
				else
				{
					swap(*this, new_value);
					return true;
				}
			}
			else
			{
				return false;
			}
		}
		{{/is_property_item}}
		{{#is_property_item}}
		case index_end_for_{{class_name}}:
		{
			if(cmd == spiritsaway::property::property_cmd::update_fields)
			{
				std::vector<std::uint8_t> related_fields;
				std::vector<std::pair<std::uint8_t, json>> field_values;
				if(!serialize::decode_multi(data, related_fields, field_values))
				{
					return false;
				}
				clear_fields(related_fields);
				return set_fields(field_values);
			}
			else
			{
				return false;
			}
		}
		{{/is_property_item}}
		default:
		{{#has_base_class}}
			return {{{base_class_name}}}::replay_mutate_msg(offset, cmd, data);
		{{/has_base_class}}
		{{^has_base_class}}
			return false;
		{{/has_base_class}}
	}
}

bool {{{class_name}}}::operator==(const {{{class_name}}}& other) const
{
	{{#has_base_class}}
	if(!{{{base_class_name}}}::operator==(other))
	{
		return false;
	}
	{{/has_base_class}}
	{{#property_fields}}	
	if(m_{{field_name}} != other.m_{{field_name}})
	{
		return false;
	}
	{{/property_fields}}
	return true;
}
bool {{{class_name}}}::operator!=(const {{{class_name}}}& other) const
{
	return !(operator==(other));
}


json {{{class_name}}}::encode() const
{
	{{#has_base_class}}
	json result = {{{base_class_name}}}::encode();
	{{/has_base_class}}
	{{^has_base_class}}
	json result;
	{{/has_base_class}}
	{{#property_fields}}
	{{#has_property_interface}}
	if(!m_{{field_name}}.has_default_value())
	{
		result["{{field_name}}"] = m_{{field_name}}.encode();
	}
	{{/has_property_interface}}
	{{^has_property_interface}}
	if(!spiritsaway::property::has_default_value<decltype(m_{{field_name}})>()(m_{{field_name}}))
	{
		result["{{field_name}}"] = spiritsaway::serialize::encode(m_{{field_name}});
	}
	{{/has_property_interface}}
	{{/property_fields}}
	return result;
}
void {{{class_name}}}::encode_with_flag(const spiritsaway::property::property_flags flag, bool ignore_default, json::array_t& result) const
{
	{{#has_base_class}}
	{{{base_class_name}}}::encode_with_flag(flag, ignore_default, result);
	{{/has_base_class}}

	{{#property_fields}}
	if((flag_for_{{field_name}} & flag.value) == flag.value)
	{
		{{#has_property_interface}}
		if(!ignore_default || !m_{{field_name}}.has_default_value())
		{
			result.push_back(spiritsaway::serialize::encode(std::make_pair(index_for_{{field_name}}, m_{{field_name}}.encode_with_flag(flag, ignore_default, true))));
		}
		{{/has_property_interface}}
		{{^has_property_interface}}
		if(!ignore_default ||!spiritsaway::property::has_default_value<decltype(m_{{field_name}})>()(m_{{field_name}}))
		{
			result.push_back(spiritsaway::serialize::encode(std::make_pair(index_for_{{field_name}}, m_{{field_name}})));
		}
		{{/has_property_interface}}
	}
	{{/property_fields}}
	return;
}

void {{{class_name}}}::encode_with_flag(const spiritsaway::property::property_flags flag, bool ignore_default, json::object_t& result) const
{
	{{#has_base_class}}
	{{{base_class_name}}}::encode_with_flag(flag, ignore_default, result);
	{{/has_base_class}}

	{{#property_fields}}
	if((flag_for_{{field_name}} & flag.value) == flag.value)
	{
		{{#has_property_interface}}
		if(!ignore_default || !m_{{field_name}}.has_default_value())
		{
			result["{{field_name}}"] = m_{{field_name}}.encode_with_flag(flag, ignore_default, false);
		}
		{{/has_property_interface}}
		{{^has_property_interface}}
		if(!ignore_default ||!spiritsaway::property::has_default_value<decltype(m_{{field_name}})>()(m_{{field_name}}))
		{
			result["{{field_name}}"] = spiritsaway::serialize::encode(m_{{field_name}});
		}
		{{/has_property_interface}}
	}
	{{/property_fields}}
	return;
}
json {{{class_name}}}::encode_with_flag(const spiritsaway::property::property_flags flag, bool ignore_default, bool replace_key_by_index) const
{
	if (replace_key_by_index)
	{
		json::array_t result;
		encode_with_flag(flag, ignore_default, result);
		return result;
	}
	else
	{
		json::object_t result;
		encode_with_flag(flag, ignore_default, result);
		return result;
	}
}

bool {{{class_name}}}::decode(const std::vector<std::pair<std::uint8_t, json>>& data, std::uint32_t& next_idx)
{
	{{#has_base_class}}
	if(!{{{base_class_name}}}::decode(data, next_idx))
	{
		return false;
	}
	{{/has_base_class}}
	while(next_idx < data.size())
	{
		const auto& one_item = data[next_idx];
		if(one_item.first >= index_end_for_{{{class_name}}})
		{
			return true;
		}
		if(one_item.first < index_begin_for_{{{class_name}}})
		{
			return false;
		}
		switch(one_item.first)
		{
			{{#property_fields}}
			case index_for_{{field_name}}:
			{
				if(!spiritsaway::serialize::decode(one_item.second, m_{{field_name}}))
				{
					return false;
				}
				break;
			}
			{{/property_fields}}
			default:
				return false;
		}
		next_idx++;
	}
	return true;
}

bool {{{class_name}}}::decode(const json::object_t& data)
{
	{{#has_base_class}}
	if(!{{{base_class_name}}}::decode(data))
	{
		return false;
	}
	{{/has_base_class}}
	decltype(data.end()) iter;
	{{#property_fields}}
	iter = data.find("{{field_name}}");
	if(iter != data.end())
	{
		if(!spiritsaway::serialize::decode(iter->second, m_{{field_name}}))
		{
			return false;
		}
	}
	
	{{/property_fields}}
	return true;
}

bool {{{class_name}}}::decode(const json& data)
{
	if(data.is_object())
	{
		json::object_t obj_data = data.get<json::object_t>();
		return decode(obj_data);
	}
	else if(data.is_array())
	{
		std::vector<std::pair<std::uint8_t, json>> array_data;
		if(!spiritsaway::serialize::decode(data, array_data))
		{
			return false;
		}
		std::uint32_t next_idx = 0;
		if(!decode(array_data, next_idx))
		{
			return false;
		}
		if(next_idx != array_data.size())
		{
			return false;
		}
		return true;
	}
	return false;
	
}

bool {{{class_name}}}::has_default_value() const
{
	{{#has_base_class}}
	if(!{{{base_class_name}}}::has_default_value())
	{
		return false;
	}
	{{/has_base_class}}
	{{#property_fields}}
	{{#has_property_interface}}
	if(!m_{{field_name}}.has_default_value())
	{
		return false;
	}
	{{/has_property_interface}}
	{{^has_property_interface}}
	if(!spiritsaway::property::has_default_value<decltype(m_{{field_name}})>()(m_{{field_name}}))
	{
		return false;
	}
	{{/has_property_interface}}
	{{/property_fields}}
	return true;
}
{{#is_property_item}}
void {{{class_name}}}::update_fields(const {{{class_name}}}& other, const json& other_json, std::vector<std::uint8_t>& field_indexes)
{
	{{#has_base_class}}
	{{{base_class_name}}}::update_fields(other, other_json, field_indexes);
	{{/has_base_class}}
	{{#property_fields}}
	auto temp_iter_for_{{field_name}} = other_json.find("{{field_name}}");
	if(temp_iter_for_{{field_name}} != other_json.end())
	{
		m_{{field_name}} = other.m_{{field_name}};
		field_indexes.push_back(index_for_{{field_name}});
	}
	{{/property_fields}}
}

void {{{class_name}}}::clear_fields(const std::vector<std::uint8_t>& related_indexes)
{
	{{#has_base_class}}
	{{{base_class_name}}}::clear_fields(related_indexes);
	{{/has_base_class}}
	for(auto one_idx: related_indexes)
	{
		switch(one_idx)
		{
		{{#property_fields}}
		case index_for_{{field_name}}:
		{
			m_{{field_name}} = {};
			break;
		}
		{{/property_fields}}
		default:
			break;
		}
	}
}

bool {{{class_name}}}::set_fields(const std::vector<std::pair<std::uint8_t, json>>& field_values)
{
	{{#has_base_class}}
	if(!{{{base_class_name}}}::set_fields(field_values))
	{
		return false;
	}
	{{/has_base_class}}
	for(auto one_idx_pair: field_values)
	{
		switch(one_idx_pair.first)
		{
		{{#property_fields}}
		case index_for_{{field_name}}:
		{
			if(!serialize::decode(one_idx_pair.second, m_{{field_name}}))
			{
				return false;
			}
			break;
		}
		{{/property_fields}}
		default:
			break;
		}
	}
	return true;
	
}
{{/is_property_item}}

}