
{{{class_name}}}::{{{class_name}}}()
{{#has_base_class}}	: {{{base_class_name}}}()
{{#property_fields}}
	, m_{{field_name}}{}{{/property_fields}}{{/has_base_class}}{{^has_base_class}}{{#property_fields}}{{#first_field}}	: m_{{field_name}}{}{{/first_field}}
{{^first_field}}
	, m_{{field_name}}{}{{/first_field}}{{/property_fields}}{{/has_base_class}}
{

}

bool {{{class_name}}}::replay_mutate_msg(spiritsaway::property::property_offset offset, spiritsaway::property::property_cmd cmd, const json& data)
{
	auto split_result = offset.split();
	auto field_index = split_result.second;
	auto remain_offset = split_result.first;
	switch(field_index)
	{
{{#property_fields}}		
		case index_for_{{field_name}}:
		{
			auto temp_proxy = make_replay_proxy(m_{{field_name}});
			return temp_proxy.replay(remain_offset, cmd, data);
		}
{{/property_fields}}
		default:
		{{#has_base_class}}
			return {{{base_class_name}}}::replay_mutate_msg(offset, cmd, data);
		{{/has_base_class}}
		{{^has_base_class}}
			return false;
		{{/has_base_class}}
	}
}

bool {{{class_name}}}::filter_with_flag(spiritsaway::property::property_flags flag, spiritsaway::property::property_offset offset, spiritsaway::property::property_cmd cmd, const json& data, json& result_data) const
{
	auto split_result = offset.split();
	auto field_index = split_result.second;
	auto remain_offset = split_result.first;
	switch(field_index)
	{
{{#property_fields}}		
		case index_for_{{field_name}}:
		{
			if((flag_for_{{field_name}} & flag.value) == flag.value)
			{
				{{#has_property_interface}}
				return m_{{field_name}}.filter_with_flag(flag, remain_offset, cmd, data, result_data);
				{{/has_property_interface}}
				{{^has_property_interface}}
				result_data = data;
				return true;
				{{/has_property_interface}}
			}
			else
			{
				return false;
			}
			
		}
{{/property_fields}}
		default:
		{{#has_base_class}}
			return {{{base_class_name}}}::filter_with_flag(flag, remain_offset, cmd, data, result_data);
		{{/has_base_class}}
		{{^has_base_class}}
			return false;
		{{/has_base_class}}
	}
}

bool {{{class_name}}}::operator==(const {{{class_name}}}& other) const
{
	{{#has_base_class}}
	if(!{{{base_class_name}}}::operator==(other))
	{
		return false;
	}
	{{/has_base_class}}
	{{#property_fields}}	
	if(m_{{field_name}} != other.m_{{field_name}})
	{
		return false;
	}
	{{/property_fields}}
	return true;
}
bool {{{class_name}}}::operator!=(const {{{class_name}}}& other) const
{
	return !(operator==(other));
}


json {{{class_name}}}::encode() const
{
	{{#has_base_class}}
	json result = {{{base_class_name}}}::encode();
	{{/has_base_class}}
	{{^has_base_class}}
	json result;
	{{/has_base_class}}
	{{#property_fields}}
	{{#has_property_interface}}
	if(!m_{{field_name}}.has_default_value())
	{
		result["{{field_name}}"] = m_{{field_name}}.encode();
	}
	{{/has_property_interface}}
	{{^has_property_interface}}
	if(!spiritsaway::property::has_default_value<decltype(m_{{field_name}})>()(m_{{field_name}}))
	{
		result["{{field_name}}"] = spiritsaway::serialize::encode(m_{{field_name}});
	}
	{{/has_property_interface}}
	{{/property_fields}}
	return result;
}

json {{{class_name}}}::encode_with_flag(const spiritsaway::property::property_flags flag) const
{
	{{#has_base_class}}
	json result = {{{base_class_name}}}::encode_with_flag(flag);
	{{/has_base_class}}
	{{^has_base_class}}
	json result;
	{{/has_base_class}}
	{{#property_fields}}
	if((flag_for_{{field_name}} & flag.value) == flag.value)
	{
		{{#has_property_interface}}
		if(!m_{{field_name}}.has_default_value())
		{
			result["{{field_name}}"] = m_{{field_name}}.encode_with_flag(flag);
		}
		{{/has_property_interface}}
		{{^has_property_interface}}
		if(!spiritsaway::property::has_default_value<decltype(m_{{field_name}})>()(m_{{field_name}}))
		{
			result["{{field_name}}"] = spiritsaway::serialize::encode(m_{{field_name}});
		}
		{{/has_property_interface}}
	}
	{{/property_fields}}
	return result;
}
bool {{{class_name}}}::decode(const json& data)
{
	{{#has_base_class}}
	if(!{{{base_class_name}}}::decode(data))
	{
		return false;
	}
	{{/has_base_class}}
	decltype(data.end()) iter;
	{{#property_fields}}
	iter = data.find("{{field_name}}");
	if(iter != data.end())
	{
		if(!spiritsaway::serialize::decode(*iter, m_{{field_name}}))
		{
			return false;
		}
	}
	
	{{/property_fields}}
	return true;
}

bool {{{class_name}}}::has_default_value() const
{
	{{#has_base_class}}
	if(!{{{base_class_name}}}::has_default_value())
	{
		return false;
	}
	{{/has_base_class}}
	{{#property_fields}}
	{{#has_property_interface}}
	if(!m_{{field_name}}.has_default_value())
	{
		return false;
	}
	{{/has_property_interface}}
	{{^has_property_interface}}
	if(!spiritsaway::property::has_default_value<decltype(m_{{field_name}})>()(m_{{field_name}}))
	{
		return false;
	}
	{{/has_property_interface}}
	{{/property_fields}}
	return true;
}


