
#ifndef __meta_parse__
public:
friend class spiritsaway::property::prop_record_proxy<{{{class_name}}}>;
friend class spiritsaway::property::prop_replay_proxy<{{{class_name}}}>;
{{{class_name}}}();
{{#property_fields}}
const decltype(m_{{field_name}})& {{field_name}}() const
{
    return m_{{field_name}};
}
{{/property_fields}}


public:

bool replay_mutate_msg(spiritsaway::property::property_offset offset, spiritsaway::property::property_cmd cmd, const json& data);

bool operator==(const {{{class_name}}}& other) const;
bool operator!=(const {{{class_name}}}& other) const;

json encode_with_flag(const spiritsaway::property::property_flags flag) const;
bool filter_with_flag(spiritsaway::property::property_flags flag, spiritsaway::property::property_offset offset, spiritsaway::property::property_cmd cmd, const json& data, json& result_data) const;

friend void swap({{{class_name}}}& a, {{{class_name}}}& b)
{
{{#has_base_class}}
	swap(({{{base_class_name}}}&)a, ({{{base_class_name}}}&)b);
{{/has_base_class}}

{{#property_fields}}	
	std::swap(a.m_{{field_name}}, b.m_{{field_name}});
{{/property_fields}}
}

json encode() const;

bool decode(const json& data);

bool has_default_value() const;

protected:
{{#property_fields}}
const static std::uint8_t index_for_{{field_name}} = {{field_index}};
const static std::uint64_t flag_for_{{field_name}} = {{field_flags}};

{{/property_fields}}
private:

#endif


